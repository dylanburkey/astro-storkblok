---
// src/components/forms/Select.astro
interface Option {
  value: string | number;
  label: string;
}

interface Props {
  label: string;
  name: string;
  options: Option[];
  value?: string | number;
  required?: boolean;
  disabled?: boolean;
  error?: string;
  class?: string;
  id?: string;
}

const {
  label,
  name,
  options,
  value,
  required = false,
  disabled = false,
  error,
  class: className,
  id = name,
  ...rest
} = Astro.props;
---

<div class:list={['form-field', className]}>
  <label for={id} class="label">
    {label}
    {required && <span class="required">*</span>}
  </label>
  
  <div class="select-wrapper">
    <select
      id={id}
      name={name}
      value={value}
      required={required}
      disabled={disabled}
      class:list={['select', { 'select-error': error }]}
      aria-invalid={error ? 'true' : undefined}
      aria-describedby={error ? `${id}-error` : undefined}
      {...rest}
    >
      {options.map(option => (
        <option value={option.value}>{option.label}</option>
      ))}
    </select>
  </div>
  
  {error && (
    <div class="error-message" id={`${id}-error`} role="alert">
      {error}
    </div>
  )}
</div>

<style>
  .form-field {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xs);
  }

  .label {
    color: var(--color-text-primary);
    font-size: var(--font-size-sm);
    font-weight: var(--font-weight-medium);
  }

  .required {
    color: var(--color-danger, #ef4444);
    margin-left: var(--spacing-xs);
  }

  .select-wrapper {
    position: relative;
  }

  .select-wrapper::after {
    content: '';
    position: absolute;
    top: 50%;
    right: var(--spacing-md);
    transform: translateY(-50%);
    width: 0;
    height: 0;
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-top: 5px solid var(--color-text-primary);
    pointer-events: none;
  }

  .select {
    width: 100%;
    padding: var(--spacing-sm) var(--spacing-md);
    padding-right: calc(var(--spacing-md) * 2);
    border: var(--border-width-thin) solid var(--color-border);
    border-radius: var(--radius-md);
    background-color: var(--color-surface-light);
    color: var(--color-text-primary);
    font-size: var(--font-size-base);
    line-height: var(--line-height-normal);
    appearance: none;
    cursor: pointer;
    transition: all var(--transition-fast);
  }

  .select:hover:not(:disabled) {
    border-color: var(--color-primary);
  }

  .select:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: var(--focus-ring);
  }

  .select:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    background-color: var(--color-surface-muted);
  }

  .select-error {
    border-color: var(--color-danger, #ef4444);
  }

  .error-message {
    font-size: var(--font-size-sm);
    color: var(--color-danger, #ef4444);
  }
</style>

---
// src/components/forms/Checkbox.astro
interface Props {
  label: string;
  name: string;
  checked?: boolean;
  required?: boolean;
  disabled?: boolean;
  error?: string;
  class?: string;
  id?: string;
}

const {
  label,
  name,
  checked = false,
  required = false,
  disabled = false,
  error,
  class: className,
  id = name,
  ...rest
} = Astro.props;
---

<div class:list={['checkbox-field', className]}>
  <label class="checkbox-label">
    <input
      type="checkbox"
      id={id}
      name={name}
      checked={checked}
      required={required}
      disabled={disabled}
      class="checkbox-input"
      aria-invalid={error ? 'true' : undefined}
      aria-describedby={error ? `${id}-error` : undefined}
      {...rest}
    />
    <span class="checkbox-text">
      {label}
      {required && <span class="required">*</span>}
    </span>
  </label>
  
  {error && (
    <div class="error-message" id={`${id}-error`} role="alert">
      {error}
    </div>
  )}
</div>

<style>
  .checkbox-field {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xs);
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    cursor: pointer;
  }

  .checkbox-input {
    appearance: none;
    width: 1.25em;
    height: 1.25em;
    border: var(--border-width-thin) solid var(--color-border);
    border-radius: var(--radius-sm);
    background-color: var(--color-surface-light);
    cursor: pointer;
    transition: all var(--transition-fast);
  }

  .checkbox-input:checked {
    background-color: var(--color-primary);
    border-color: var(--color-primary);
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 8l2 2 6-6'/%3E%3C/svg%3E");
    background-size: 75% 75%;
    background-position: center;
    background-repeat: no-repeat;
  }

  .checkbox-input:hover:not(:disabled) {
    border-color: var(--color-primary);
  }

  .checkbox-input:focus-visible {
    outline: none;
    box-shadow: var(--focus-ring);
  }

  .checkbox-input:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    background-color: var(--color-surface-muted);
  }

  .checkbox-input:disabled + .checkbox-text {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .checkbox-text {
    color: var(--color-text-primary);
    font-size: var(--font-size-base);
    user-select: none;
  }

  .required {
    color: var(--color-danger, #ef4444);
    margin-left: var(--spacing-xs);
  }

  .error-message {
    font-size: var(--font-size-sm);
    color: var(--color-danger, #ef4444);
  }
</style>